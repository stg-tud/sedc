// Space... the final frontier

package dc
package traits

package object traits {

}

trait Space {
    def dimensions: Int
}
trait Space2D extends Space {
    def dimensions = 2
}
trait Space3D extends Space {
    def dimensions = 3
}

trait Points { this: Space ⇒

    type point <: Point
    trait Point {
        def isLessOrEqual(p: point): Boolean
        def closerToOriginThan(p: point): Boolean
    }

    def origin: point
}

trait PointsIn2D extends Points { this: Space2D with VectorsIn2D ⇒

    type point <: Point
    trait Point extends super.Point {
        val x: Double
        val y: Double
        def isLessOrEqual(p: point) = x <= p.x && y <= p.y
        def closerToOriginThan(p: point) = Math.sqrt(x * x + y * y) < Math.sqrt(p.x * p.x + p.y * p.y)
        def add(v: Vector) = Point(x + v.x, y + v.y)
    }
    def Point(x: Double, y: Double): point
    val origin = Point(0, 0)
}

trait PointsIn3D extends Points { this: Space3D with VectorsIn3D ⇒
    type point <: Point
    trait Point extends super.Point {
        val x: Double
        val y: Double
        val z: Double

        def isLessOrEqual(p: point) = x <= p.x && y <= p.y && z <= p.z
        def closerToOriginThan(p: point) = Math.sqrt(x * x + y * y + z * z) < Math.sqrt(p.x * p.x + p.y * p.y + p.z * p.z)
        def add(v: Vector) = Point(x + v.x, y + v.y, z + v.z)
    }
    def Point(x: Double, y: Double, z: Double): point
    val origin = Point(0, 0, 0)
}

trait Vectors { this: Space ⇒
    type vector <: Vector
    trait Vector {
        def scale(d: Double): vector
    }
}

trait VectorsIn2D extends Vectors { this: Space2D ⇒
    type vector <: Vector
    trait Vector extends super.Vector {
        val x: Double
        val y: Double
        def scale(d: Double) = Vector(x * d, y * d)
    }
    def Vector(x: Double, y: Double): vector
}

trait VectorsIn3D extends Vectors { this: Space3D ⇒
    type vector <: Vector
    trait Vector extends super.Vector {
        val x: Double
        val y: Double
        val z: Double
        def scale(d: Double) = Vector(x * d, y * d, z * d)
    }
    def Vector(x: Double, y: Double, z: Double): vector
}

trait The2DSpace extends PointsIn2D with VectorsIn2D with Space2D {
    type vector = Vector
    case class VectorIn2D(x: Double, y: Double) extends Vector
    def Vector(x: Double, y: Double) = VectorIn2D(x, y)

    type point = Point
    case class PointIn2D(x: Double, y: Double) extends Point
    def Point(x: Double, y: Double) = PointIn2D(x, y)
}

trait The3DSpace extends PointsIn3D with VectorsIn3D with Space3D {
    type vector = Vector
    case class VectorIn3D(x: Double, y: Double, z: Double) extends Vector
    def Vector(x: Double, y: Double, z: Double) = VectorIn3D(x, y, z)

    type point = Point
    case class PointIn3D(x: Double, y: Double, z: Double) extends Point
    def Point(x: Double, y: Double, z: Double) = PointIn3D(x, y, z)
}

trait Shapes { this: Space with Points ⇒
    type shape <: Shape

    trait Shape {
        type Universe <: Shapes.this.type
        def universe: Universe

        def pointInside(pt: point): Boolean
    }
}

trait BoundedShapes extends Shapes { this: Space with Points ⇒

    type shape <: Shape

    trait Shape extends super.Shape {
        type Universe <: BoundedShapes.this.type
        def universe: Universe
    }

    trait BoundedShape extends Shape {
    }
}

trait SolidShapes extends Shapes { this: Space with Points ⇒

    type shape <: Shape

    trait Shape extends super.Shape {
        type Universe <: SolidShapes.this.type
        def universe: Universe
    }

    trait SolidShape extends Shape {
        // def pointOnEdge(pt: point): Boolean
    }
}

trait Boxes extends BoundedShapes with SolidShapes { this: Space with Points ⇒

    type shape <: Shape

    trait Shape extends super[BoundedShapes].Shape with super[SolidShapes].Shape {
        type Universe <: Boxes.this.type
        def universe: Universe
    }

    class Box(val p1: point, val p2: point) extends BoundedShape with SolidShape {

        def pointInside(pt: point): Boolean = p1.isLessOrEqual(pt) && pt.isLessOrEqual(p2)
        // def pointOnEdge(pt: Point) : Boolean =  
    }
}

trait IntersectionShapes extends Shapes { this: Space with Points ⇒

    type shape <: Shape

    trait Shape extends super.Shape {
        type Universe <: IntersectionShapes.this.type
        def universe: Universe
    }

    class Intersection(val s1: Shape,
                       val s2: Shape) extends Shape {

        def pointInside(pt: point): Boolean = s1.pointInside(pt) && s2.pointInside(pt)
    }
}

trait UnionShapes extends SolidShapes with BoundedShapes { this: Space with Points ⇒

    type shape <: Shape

    trait Shape extends super.Shape {
        type Universe <: UnionShapes.this.type
        def universe: Universe
    }

    abstract class Union[S1 <: Shape, S2 <: Shape](val shape1: S1, val shape2: S2) extends Shape {
        def pointInside(pt: point) = shape1.pointInside(pt) || shape2.pointInside(pt)
    }

    def createUnion[S1 <: shape, S2 <: shape](s1: S1, s2: S2): Union[S1, S2]

    // Creates a union of two shapes of this(!) space
    def Union[S1 <: shape, S2 <: shape](s1: S1, s2: S2) = (s1, s2) match {
        case (s1: SolidShape, s2: shape) ⇒ createUnion[Shape, Shape](s1, s2)
        case (s1: Shape, s2: SolidShape) ⇒ createUnion[Shape, Shape](s1, s2)
        case _                           ⇒ sys.error("not supported")
    }
}

trait ExSpace extends Space with Points with Vectors with Boxes with IntersectionShapes with UnionShapes {
    this: Space with Points with Vectors with Boxes with IntersectionShapes with UnionShapes ⇒

    type shape <: Shape
    trait Shape extends super[Boxes].Shape with super[IntersectionShapes].Shape with super[UnionShapes].Shape {
        type Universe <: ExSpace.this.type
        def universe: Universe
    }
}

trait Ex2DSpace extends The2DSpace with ExSpace {
    type shape = Shape
    trait Shape extends super.Shape {
        type Universe = Ex2DSpace.this.type
        def universe: Universe = Ex2DSpace.this
    }

    case class Intersection(s1: Shape, s2: Shape) extends super.Intersection(s1, s2) with Shape

    case class Box(p1: point, p2: point) extends super.Box(p1, p2) with Shape

    abstract class Union[S1 <: Shape, S2 <: Shape](s1: S1, s2: S2) extends super.Union(s1, s2) with Shape
}
trait Ex3DSpace extends The3DSpace with ExSpace {
    trait Shape extends super.Shape {
        type Universe = Ex3DSpace.this.type
        def universe: Universe = Ex3DSpace.this
    }

    case class Intersection(s1: Shape, s2: Shape) extends super.Intersection(s1, s2) with Shape

    case class Box(p1: point, p2: point) extends super.Box(p1, p2) with Shape
}

object Demo extends App {
    val S2D = new Ex2DSpace {}
    val S2DAlt = new Ex2DSpace {}
    val S3D = new Ex3DSpace {}

    val someVector: Vectors#Vector =
        if ((System.currentTimeMillis() % 3 == 0))
            S2D.Vector(2, 1)
        else
            S3D.Vector(2, 1, 0)

    val a2DVector: S2D.Vector = S2D.Vector(2, 2)
    val p12D = S2D.Point(2, 1)
    val p22D = S2D.Point(1, 2)
    val p32D = S2D.Point(3, 2)

    val b12D = S2D.Box(p12D, p22D)
    val b22D = S2D.Box(p22D, p32D)
    val i2D = S2D.Intersection(b12D, b22D)

    val b = p12D closerToOriginThan p22D

    val b12DAlt = S2DAlt.Box(null, null)

    val a3DVector: S3D.Vector = S3D.Vector(3, 3, 3)
    val p13D = S3D.Point(1, 2, 3)
    val p23D = S3D.Point(2, 2, 4)
    val p33D = S3D.Point(3, 3, 6)
    val p43D = p13D.add(a3DVector)
    val b13D = S3D.Box(p13D, p23D)

    // correctly, won't compile: p13D.add(a2DVector)
    // correctly, won't compile: p13D.add(someVector)
    // correctly, won't compile: val i3D = S3D.Intersection(b12D,b13D)

    def inside(s: ExSpace)(pt: s.Point, shape: s.Shape): Boolean = { true /* needs to be refined...*/ }
    inside(S2D)(p12D, b22D)
    // correctly, won't compile: inside(S3D)(p12D, b22D)

    def projectionToS2D(shape: Ex3DSpace#Shape): S2DAlt.Shape = {
        // won't compile: b22D 
        S2DAlt.Box(null, null) // needs to be improved..
    }
    projectionToS2D(b13D)

    def projection(shape: Ex3DSpace#Shape, targetSpace: Ex2DSpace): targetSpace.Shape = {
        // won't compile: b22D 
        targetSpace.Box(null, null) // needs to be improved..
    }

    val gs2D = projection(b13D, S2D)
    val gs2DAlt = projection(b13D, S2DAlt)
    inside(S2D)(p12D, gs2D)
    // correctly, won't compile: inside(S2D)(p12D,gs2DAlt)
    println(gs2D.getClass+" "+gs2DAlt.getClass)

    // correctly, won't compile: projection(b12D)

    val unionShapeS2D = S2D.Union(b12D, b22D)
    // correctly, won't compile: val unionShape = S2D.Union(b12D,b13D) // mixing shape of different spaces
    // correctly, won't compile: val unionShapeS2DS2DAlt = S2D.Union(b12D,b12DAlt) // union of shapes of different 2D spaces

    import scala.reflect.api.TypeTags
    import scala.reflect.runtime.universe._

    // Given that we do not have something like MultiMethods, the following will not work:
    //    def UnionAcrossSpaces(s: ExSpace)(s1: ExSpace#Shape, s2: ExSpace#Shape) = {} // most general
    //    def UnionAcrossSpaces(s: ExSpace)(s1: s.Shape, s2: s.Shape) = { s.Union(s1, s2) } 
    //    def UnionAcrossSpaces(s: Ex2DSpace)(s1: Ex2DSpace#Shape, s2: Ex2DSpace#Shape) = {}
    //    val unionASShapeS2D = UnionAcrossSpaces(S2D)(b12D, b22D); println
    //    val unionASShapeS2DA2DAlt = UnionAcrossSpaces(S2D)(b12D, b12DAlt); println
    //    val unionASShapeS2DS3D = UnionAcrossSpaces(S2D)(b12D, b13D); println

    def UnionAcrossSpaces[S1 <: Shapes#Shape, S2 <: Shapes#Shape, ST <: ExSpace](s1: S1, s2: S2, target: ST)(implicit s1Tag: TypeTag[S1], s2Tag: TypeTag[S2], spaceTag: TypeTag[ST]) = {
        val spaceType = typeOf[target.type]
        val TypeRef(p1, _, _) = s1Tag.tpe
        val TypeRef(p2, _, _) = s2Tag.tpe

        println("SpaceType of shapes: "+p1+"#"+p1.hashCode+", "+p2+"#"+p2.hashCode+"; type of space: "+spaceType+"#"+spaceType.hashCode())
        println(spaceType.typeSymbol)
        println(p1.typeSymbol)
        println(p2.typeSymbol)

        (s1Tag.tpe, s2Tag.tpe) match {
            case (TypeRef(p1, _, _), TypeRef(p2, _, _)) if p1 =:= p2
                /*&& (p1.typeSymbol.toString() == spaceType.typeSymbol.toString()) ⇒ { // FIXME (!) We need a replacement for this strange "toString()" conversion... */
                && (s1.universe eq target) ⇒ { // FIXME (!) We need a replacement for this strange "toString()" conversion... */
                println("Both shapes are from the same space as the target space: "+p1+" <=> "+p2)
                s1.universe.Union(s1, s2)
            }
            case (TypeRef(p1, _, _), TypeRef(p2, _, _)) if p1 <:< typeTag[Ex2DSpace].tpe && p2 <:< typeTag[Ex2DSpace].tpe ⇒ {
                println("Both shapes are from a 2D space: "+p1+"("+p1.typeSymbol.fullName+") <=> "+p2+"("+p2.typeSymbol.fullName+"); target: "+spaceType)
                // create a new shape in the target space...
            }
            case _ ⇒ println("Creating a union of this pair of shapes is not supported")
        }
    }

    val unionASShapeS2D = UnionAcrossSpaces(b12D, b22D, S2D); println
    val unionASShapeS2DA2DAlt = UnionAcrossSpaces(b12D, b12DAlt, S2D); println
    val unionASShapeS2DS3D = UnionAcrossSpaces(b12D, b13D, S2D); println

}

